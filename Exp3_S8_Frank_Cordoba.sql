
ALTER SESSION SET CURRENT_SCHEMA = PRY2204_S8;

/* -------------- LIMPIEZA --------------*/

DROP TABLE detalle_venta CASCADE CONSTRAINTS PURGE;
DROP TABLE venta CASCADE CONSTRAINTS PURGE;
DROP TABLE vendedor CASCADE CONSTRAINTS PURGE;
DROP TABLE administrativo CASCADE CONSTRAINTS PURGE;
DROP TABLE empleado CASCADE CONSTRAINTS PURGE;
DROP TABLE producto CASCADE CONSTRAINTS PURGE;
DROP TABLE proveedor CASCADE CONSTRAINTS PURGE;
DROP TABLE marca CASCADE CONSTRAINTS PURGE;
DROP TABLE categoria CASCADE CONSTRAINTS PURGE;
DROP TABLE formato CASCADE CONSTRAINTS PURGE;
DROP TABLE medio_pago CASCADE CONSTRAINTS PURGE;
DROP TABLE salud CASCADE CONSTRAINTS PURGE;
DROP TABLE afp CASCADE CONSTRAINTS PURGE;
DROP TABLE comuna CASCADE CONSTRAINTS PURGE;
DROP TABLE region CASCADE CONSTRAINTS PURGE;
DROP SEQUENCE seq_salud;
DROP SEQUENCE seq_empleado;


-- ==========================================================
-- 01) DDL – Tablas base y relaciones
-- ==========================================================

-- [DDL] Geografía
CREATE TABLE region (
  id_region   NUMBER(4) GENERATED BY DEFAULT AS IDENTITY,
  nom_region  VARCHAR2(255) NOT NULL,
  CONSTRAINT region_pk PRIMARY KEY (id_region),
  CONSTRAINT region_un_nom_region UNIQUE (nom_region)
);

CREATE TABLE comuna (
  id_comuna   NUMBER(4) GENERATED BY DEFAULT AS IDENTITY,
  nom_comuna  VARCHAR2(100) NOT NULL,
  cod_region  NUMBER(4) NOT NULL,
  CONSTRAINT comuna_pk PRIMARY KEY (id_comuna),
  CONSTRAINT comuna_fk_region FOREIGN KEY (cod_region) REFERENCES region(id_region),
  CONSTRAINT comuna_un_nom_comuna_region UNIQUE (nom_comuna, cod_region)
);

-- [DDL] Previsión / Pago
CREATE TABLE afp (
  id_afp   NUMBER(5) GENERATED BY DEFAULT AS IDENTITY (START WITH 210 INCREMENT BY 6),
  nom_afp  VARCHAR2(255) NOT NULL,
  CONSTRAINT afp_pk PRIMARY KEY (id_afp)
);

CREATE TABLE salud (
  id_salud  NUMBER(5) NOT NULL,
  nom_salud VARCHAR2(40) NOT NULL,
  CONSTRAINT salud_pk PRIMARY KEY (id_salud),
  CONSTRAINT salud_un_nom_salud UNIQUE (nom_salud)
);

CREATE SEQUENCE seq_salud START WITH 2050 INCREMENT BY 10;

CREATE TABLE medio_pago (
  id_mpago     NUMBER(3) GENERATED BY DEFAULT AS IDENTITY (START WITH 11 INCREMENT BY 1),
  nombre_mpago VARCHAR2(50) NOT NULL,
  CONSTRAINT medio_pago_pk PRIMARY KEY (id_mpago),
  CONSTRAINT medio_pago_un_nombre_mpago UNIQUE (nombre_mpago)
);

-- [DDL] Catálogos / Proveedor
CREATE TABLE marca (
  id_marca      NUMBER(3) GENERATED BY DEFAULT AS IDENTITY,
  nombre_marca  VARCHAR2(25) NOT NULL,
  CONSTRAINT marca_pk PRIMARY KEY (id_marca)
  -- UNIQUE via ALTER más abajo (marca_un_nombre_marca)
);

CREATE TABLE categoria (
  id_categoria      NUMBER(3) GENERATED BY DEFAULT AS IDENTITY,
  nombre_categoria  VARCHAR2(255) NOT NULL,
  CONSTRAINT categoria_pk PRIMARY KEY (id_categoria),
  CONSTRAINT categoria_un_nombre_categoria UNIQUE (nombre_categoria)
);

CREATE TABLE formato (
  id_formato   NUMBER(3) GENERATED BY DEFAULT AS IDENTITY,
  nom_formato  VARCHAR2(50) NOT NULL,
  CONSTRAINT formato_pk PRIMARY KEY (id_formato),
  CONSTRAINT formato_un_nom_formato UNIQUE (nom_formato)
);

CREATE TABLE proveedor (
  id_proveedor     NUMBER(5) GENERATED BY DEFAULT AS IDENTITY,
  nombre_proveedor VARCHAR2(150) NOT NULL,
  rut_proveedor    VARCHAR2(12),
  telefono         VARCHAR2(20),
  email            VARCHAR2(200) NOT NULL,
  direccion        VARCHAR2(200),
  cod_comuna       NUMBER(4),
  CONSTRAINT proveedor_pk PRIMARY KEY (id_proveedor),
  CONSTRAINT proveedor_fk_comuna FOREIGN KEY (cod_comuna) REFERENCES comuna(id_comuna)
  -- UNIQUE via ALTER (proveedor_un_email)
);

CREATE TABLE producto (
  id_producto      NUMBER(4) GENERATED BY DEFAULT AS IDENTITY,
  nombre_producto  VARCHAR2(100) NOT NULL,
  precio_unitario  NUMBER(10,0)  NOT NULL,
  origen_nacional  CHAR(1) DEFAULT 'S' NOT NULL,  -- 'S'/'N'
  stock_minimo     NUMBER(3)  DEFAULT 3 NOT NULL, -- RN via ALTER
  activo           CHAR(1) DEFAULT 'S' NOT NULL,  -- 'S'/'N'
  cod_marca        NUMBER(3) NOT NULL,
  cod_categoria    NUMBER(3) NOT NULL,
  cod_formato      NUMBER(3) NOT NULL,
  cod_proveedor    NUMBER(5) NOT NULL,
  CONSTRAINT producto_pk PRIMARY KEY (id_producto),
  CONSTRAINT producto_fk_marca     FOREIGN KEY (cod_marca)     REFERENCES marca(id_marca),
  CONSTRAINT producto_fk_categoria FOREIGN KEY (cod_categoria) REFERENCES categoria(id_categoria),
  CONSTRAINT producto_fk_formato   FOREIGN KEY (cod_formato)   REFERENCES formato(id_formato),
  CONSTRAINT producto_fk_proveedor FOREIGN KEY (cod_proveedor) REFERENCES proveedor(id_proveedor)
);

-- [DDL] Personal y subtipos
CREATE TABLE empleado (
  id_empleado         NUMBER(4) NOT NULL,
  rut_empleado        VARCHAR2(12),
  nombre_empleado     VARCHAR2(25) NOT NULL,
  apellido_paterno    VARCHAR2(25) NOT NULL,
  apellido_materno    VARCHAR2(25),
  fecha_contratacion  DATE,
  sueldo_base         NUMBER(10,0) NOT NULL,     -- RN via ALTER
  bono_jefatura       NUMBER(10,0),
  activo              CHAR(1) DEFAULT 'S' NOT NULL,
  tipo_empleado       VARCHAR2(25) NOT NULL,     -- 'Vendedor' | 'Administrativo'
  cod_empleado        NUMBER(4),                 -- jefe
  cod_salud           NUMBER(5),
  cod_afp             NUMBER(5),
  CONSTRAINT empleado_pk PRIMARY KEY (id_empleado),
  CONSTRAINT empleado_fk_jefe  FOREIGN KEY (cod_empleado) REFERENCES empleado(id_empleado),
  CONSTRAINT empleado_fk_salud FOREIGN KEY (cod_salud)    REFERENCES salud(id_salud),
  CONSTRAINT empleado_fk_afp   FOREIGN KEY (cod_afp)      REFERENCES afp(id_afp),
  CONSTRAINT empleado_ck_act   CHECK (activo IN ('S','N')),
  CONSTRAINT empleado_ck_tipo  CHECK (tipo_empleado IN ('Vendedor','Administrativo'))
);

CREATE SEQUENCE seq_empleado START WITH 750 INCREMENT BY 3;

CREATE TABLE vendedor (
  id_empleado    NUMBER(4) PRIMARY KEY REFERENCES empleado(id_empleado),
  comision_venta NUMBER(5,2) DEFAULT 0 NOT NULL
  -- RN via ALTER (vendedor_ck_com)
);

CREATE TABLE administrativo (
  id_empleado NUMBER(4) PRIMARY KEY REFERENCES empleado(id_empleado)
);

-- [DDL] Venta y detalle
CREATE TABLE venta (
  id_venta      NUMBER(4) GENERATED BY DEFAULT AS IDENTITY (START WITH 5050 INCREMENT BY 3),
  fecha_venta   DATE NOT NULL,
  total_venta   NUMBER(10,0) NOT NULL,
  cod_mpago     NUMBER(3) NOT NULL,
  cod_empleado  NUMBER(4) NOT NULL,  -- referencia EMPLEADO
  CONSTRAINT venta_pk PRIMARY KEY (id_venta),
  CONSTRAINT venta_fk_medio_pago FOREIGN KEY (cod_mpago)    REFERENCES medio_pago(id_mpago),
  CONSTRAINT venta_fk_empleado   FOREIGN KEY (cod_empleado) REFERENCES empleado(id_empleado)
);

CREATE TABLE detalle_venta (
  cod_venta    NUMBER(4) NOT NULL,
  cod_producto NUMBER(4) NOT NULL,
  cantidad     NUMBER(4) NOT NULL, -- RN via ALTER
  CONSTRAINT detalle_venta_pk PRIMARY KEY (cod_venta, cod_producto),
  CONSTRAINT det_venta_fk_venta    FOREIGN KEY (cod_venta)    REFERENCES venta(id_venta),
  CONSTRAINT det_venta_fk_producto FOREIGN KEY (cod_producto) REFERENCES producto(id_producto)
);

-- ==========================================================
-- 02) RN – Reglas de Negocio vía ALTER 
-- ==========================================================
ALTER TABLE empleado      ADD CONSTRAINT empleado_ck_sueldo       CHECK (sueldo_base >= 400000);
ALTER TABLE vendedor      ADD CONSTRAINT vendedor_ck_com          CHECK (comision_venta BETWEEN 0 AND 0.25);
ALTER TABLE producto      ADD CONSTRAINT producto_ck_stock        CHECK (stock_minimo >= 3);
ALTER TABLE proveedor     ADD CONSTRAINT proveedor_un_email       UNIQUE (email);
ALTER TABLE marca         ADD CONSTRAINT marca_un_nombre_marca    UNIQUE (nombre_marca);
ALTER TABLE detalle_venta ADD CONSTRAINT detalle_ck_cant          CHECK (cantidad > 1);  -- consigna “mayor a 1”

-- ==========================================================
-- 03) DML – Poblamiento 
-- ==========================================================

-- [DML] Geografía
INSERT INTO region (nom_region) VALUES ('Región Metropolitana');
INSERT INTO region (nom_region) VALUES ('Valparaíso');
INSERT INTO region (nom_region) VALUES ('Biobío');
INSERT INTO region (nom_region) VALUES ('Los Lagos');

INSERT INTO comuna (nom_comuna, cod_region) VALUES ('Santiago',     1);
INSERT INTO comuna (nom_comuna, cod_region) VALUES ('Valparaíso',   2);
INSERT INTO comuna (nom_comuna, cod_region) VALUES ('Concepción',   3);
INSERT INTO comuna (nom_comuna, cod_region) VALUES ('Puerto Montt', 4);

-- [DML] AFP / Salud / Medio de pago
INSERT INTO afp (nom_afp) VALUES ('AFP Habitat');
INSERT INTO afp (nom_afp) VALUES ('AFP Cuprum');
INSERT INTO afp (nom_afp) VALUES ('AFP Provida');
INSERT INTO afp (nom_afp) VALUES ('AFP PlanVital');

INSERT INTO salud (id_salud, nom_salud) VALUES (seq_salud.NEXTVAL, 'Fonasa');
INSERT INTO salud (id_salud, nom_salud) VALUES (seq_salud.NEXTVAL, 'Isapre Colmena');
INSERT INTO salud (id_salud, nom_salud) VALUES (seq_salud.NEXTVAL, 'Isapre Banmédica');
INSERT INTO salud (id_salud, nom_salud) VALUES (seq_salud.NEXTVAL, 'Isapre Cruz Blanca');

INSERT INTO medio_pago (nombre_mpago) VALUES ('Efectivo');
INSERT INTO medio_pago (nombre_mpago) VALUES ('Tarjeta Débito');
INSERT INTO medio_pago (nombre_mpago) VALUES ('Tarjeta Crédito');
INSERT INTO medio_pago (nombre_mpago) VALUES ('Cheque');

-- [DML] Catálogos + proveedor
INSERT INTO marca (nombre_marca) VALUES ('Coca-Cola');
INSERT INTO categoria (nombre_categoria) VALUES ('Bebidas');
INSERT INTO formato (nom_formato)       VALUES ('Botella 1.5L');

INSERT INTO proveedor (nombre_proveedor, rut_proveedor, telefono, email, direccion, cod_comuna)
VALUES ('Distribuidora Sur SpA','76.123.456-7','22223333','contacto@distsur.cl','Av. Siempre Viva 123',1);

INSERT INTO producto (nombre_producto, precio_unitario, origen_nacional, stock_minimo, activo,
                      cod_marca, cod_categoria, cod_formato, cod_proveedor)
VALUES ('Bebida Cola 1.5L', 1890, 'N', 3, 'S', 1, 1, 1, 1);

-- [DML] Empleados y subtipos (SEQ 750, 753, 756, ...)
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '11.111.111-1','Marcela','González','Pérez',   DATE '2022-03-15', 950000, 80000,'S','Administrativo', NULL, 2050, 210);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '22.222.222-2','José','Muñoz','Ramírez',       DATE '2021-07-10', 900000, 75000,'S','Administrativo', NULL, 2060, 216);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '33.333.333-3','Verónica','Soto','Alarcón',    DATE '2020-01-05', 880000, 70000,'S','Vendedor',       750, 2070, 228);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '44.444.444-4','Luis','Reyes','Fuentes',        DATE '2023-04-01', 560000,    NULL,'S','Vendedor',       750, 2070, 228);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '55.555.555-5','Claudia','Fernández','Lagos',  DATE '2023-04-15', 600000,    NULL,'S','Vendedor',       753, 2060, 216);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '66.666.666-6','Carlos','Navarro','Vega',      DATE '2023-05-01', 610000,    NULL,'S','Administrativo', 753, 2060, 216);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '77.777.777-7','Javiera','Pino','Rojas',       DATE '2023-05-10', 650000,    NULL,'S','Administrativo', 750, 2050, 210);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '88.888.888-8','Diego','Mella','Contreras',    DATE '2023-05-12', 620000,    NULL,'S','Vendedor',       753, 2070, 228);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '99.999.999-9','Fernanda','Salas','Herrera',   DATE '2023-05-18', 570000,    NULL,'S','Vendedor',       753, 2070, 228);
INSERT INTO empleado VALUES (seq_empleado.NEXTVAL, '10.101.010-0','Tomás','Vidal','Espinoza',     DATE '2023-06-01', 530000,    NULL,'S','Vendedor',       NULL, 2050, 222);

INSERT INTO administrativo (id_empleado) VALUES (750);
INSERT INTO administrativo (id_empleado) VALUES (753);
INSERT INTO administrativo (id_empleado) VALUES (765);
INSERT INTO administrativo (id_empleado) VALUES (768);

INSERT INTO vendedor (id_empleado, comision_venta) VALUES (756, 0.20);
INSERT INTO vendedor (id_empleado, comision_venta) VALUES (759, 0.12);
INSERT INTO vendedor (id_empleado, comision_venta) VALUES (762, 0.10);
INSERT INTO vendedor (id_empleado, comision_venta) VALUES (771, 0.15);
INSERT INTO vendedor (id_empleado, comision_venta) VALUES (774, 0.10);
INSERT INTO vendedor (id_empleado, comision_venta) VALUES (777, 0.18);

-- [DML] Ventas (IDENTITY 5050, 5053, 5056)
INSERT INTO venta (fecha_venta, total_venta, cod_mpago, cod_empleado) VALUES (DATE '2023-05-12', 225990, 12, 771);
INSERT INTO venta (fecha_venta, total_venta, cod_mpago, cod_empleado) VALUES (DATE '2023-10-23', 524990, 13, 777);
INSERT INTO venta (fecha_venta, total_venta, cod_mpago, cod_empleado) VALUES (DATE '2023-02-17', 466990, 11, 759);

COMMIT;

-- ==========================================================
-- 04) QRY – Informes 
-- ==========================================================

-- [QRY] Informe 1: Activos con bono
SELECT
  e.id_empleado AS IDENTIFICADOR,
  (e.nombre_empleado || ' ' || e.apellido_paterno || ' ' || e.apellido_materno) AS NOMBRE_COMPLETO,
  e.sueldo_base AS SALARIO,
  e.bono_jefatura AS BONIFICACION,
  (e.sueldo_base + e.bono_jefatura) AS SALARIO_SIMULADO
FROM empleado e
WHERE e.activo = 'S' AND e.bono_jefatura IS NOT NULL
ORDER BY SALARIO_SIMULADO DESC, e.apellido_paterno DESC;

-- [QRY] Informe 2: Sueldos entre 550k–800k
SELECT
  (e.nombre_empleado || ' ' || e.apellido_paterno || ' ' || e.apellido_materno) AS EMPLEADO,
  e.sueldo_base AS SUELDO,
  (e.sueldo_base * 0.08) AS POSIBLE_AUMENTO,
  (e.sueldo_base * 1.08) AS SUELDO_SIMULADO
FROM empleado e
WHERE e.sueldo_base BETWEEN 550000 AND 800000
ORDER BY SUELDO ASC;

-- [QRY] Informe 3: Ventas con vendedor y medio de pago
SELECT
  v.id_venta AS ID_VENTA,
  v.fecha_venta AS FECHA_VENTA,
  v.total_venta AS TOTAL,
  (e.nombre_empleado || ' ' || e.apellido_paterno) AS VENDEDOR,
  mp.nombre_mpago AS MEDIO_PAGO
FROM venta v
JOIN empleado  e  ON e.id_empleado = v.cod_empleado
JOIN medio_pago mp ON mp.id_mpago   = v.cod_mpago
WHERE mp.nombre_mpago IN ('Efectivo','Tarjeta Crédito')
ORDER BY FECHA_VENTA DESC;

-- [QRY] Informe 4: Productos importados 'Bebi%'
SELECT
  p.id_producto AS ID_PRODUCTO,
  p.nombre_producto AS NOMBRE_PRODUCTO,
  p.precio_unitario AS PRECIO_UNITARIO,
  CASE WHEN p.origen_nacional = 'S' THEN 'Nacional' ELSE 'Importado' END AS ORIGEN
FROM producto p
WHERE p.nombre_producto LIKE 'Bebi%' AND p.origen_nacional = 'N'
ORDER BY PRECIO_UNITARIO ASC;

-- [QRY] Informe 5: Vendedores por rango de comisión
SELECT
  e.id_empleado AS ID_EMPLEADO,
  (e.nombre_empleado || ' ' || e.apellido_paterno) AS VENDEDOR,
  vnd.comision_venta AS COMISION_VENTA
FROM vendedor vnd
JOIN empleado e ON e.id_empleado = vnd.id_empleado
WHERE vnd.comision_venta BETWEEN 0.10 AND 0.20
ORDER BY COMISION_VENTA DESC;

-- [QRY] Informe 6: Activos con (sin bono OR sueldo >= 900k)
SELECT
  e.id_empleado AS ID_EMPLEADO,
  (e.nombre_empleado || ' ' || e.apellido_paterno) AS EMPLEADO,
  e.sueldo_base AS SUELDO_BASE,
  e.bono_jefatura AS BONO_JEFATURA
FROM empleado e
WHERE e.activo = 'S' AND (e.bono_jefatura IS NULL OR e.sueldo_base >= 900000)
ORDER BY SUELDO_BASE DESC;